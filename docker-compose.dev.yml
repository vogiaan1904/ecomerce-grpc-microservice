services:
  # Infrastructure services
  user-mongo:
    container_name: user-mongo
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - user_mongo_data:/data/db
  order-mongo:
    container_name: order-mongo
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - order_mongo_data:/data/db
  product-postgres:
    container_name: product-postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=productdb
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
  auth-redis:
    container_name: auth-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # Services
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    env_file:
      - ./api-gateway/.env.dev
    environment:
      - NODE_ENV=development
    command: npm run start:dev
    depends_on:
      - auth-svc
      - user-svc
      - product-svc
      - order-svc
      - payment-svc
      - order-orchestrator
  auth-svc:
    container_name: auth-service
    build:
      context: ./auth-svc
      dockerfile: Dockerfile
    volumes:
      - ./auth-svc:/app
      - /app/node_modules
    env_file:
      - ./auth-svc/.env.dev
    environment:
      - NODE_ENV=development
    command: npm run start:dev
    depends_on:
      - auth-redis
    ports:
      - "50051:50051"
  user-svc:
    container_name: user-service
    build:
      context: ./user-svc
      dockerfile: Dockerfile
    volumes:
      - ./user-svc:/app
      - /app/node_modules
    env_file:
      - ./user-svc/.env.dev
    environment:
      - NODE_ENV=development
    command: npm run start:dev
    depends_on:
      - user-mongo
    ports:
      - "50052:50052"
  product-svc:
    container_name: product-service
    build:
      context: ./product-svc
      dockerfile: Dockerfile
    volumes:
      - ./product-svc:/app
      - /app/node_modules
    env_file:
      - ./product-svc/.env.dev
    environment:
      - NODE_ENV=development
    command: npm run start:dev
    depends_on:
      - product-postgres
    ports:
      - "50053:50053"
  order-svc:
    container_name: order-service
    build:
      context: ./order-svc
      dockerfile: Dockerfile
    volumes:
      - ./order-svc:/app
    env_file:
      - ./order-svc/.env.dev
    environment:
      - NODE_ENV=development
    command: make run
    depends_on:
      - order-mongo
    ports:
      - "50054:50054"
  payment-svc:
    container_name: payment-service
    build:
      context: ./payment-svc
      dockerfile: Dockerfile
    volumes:
      - ./payment-svc:/app
    env_file:
      - ./payment-svc/.env.dev
    command: make run
    ports:
      - "50055:50055"
  order-orchestrator:
    container_name: order-orchestrator
    build:
      context: ./order-orchestrator
      dockerfile: Dockerfile
    volumes:
      - ./order-orchestrator:/app
    env_file:
      - ./order-orchestrator/.env.dev
    command: make run
    depends_on:
      - temporal

  # Temporal services
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:7.17.27
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:15
    expose:
      - 5432
    volumes:
      - /var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/auto-setup:1.27.2
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.27.2-tctl-1.18.2-cli-1.3.0
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.34.0
    ports:
      - 8080:8080

volumes:
  user_mongo_data:
  order_mongo_data:
  product_postgres_data:

networks:
  default:
    driver: bridge
